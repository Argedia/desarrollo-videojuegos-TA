using UnityEngine;

[RequireComponent(typeof(SpriteRenderer))]
public class TemporaryInvulnerability : MonoBehaviour
{
    [SerializeField] private bool flashDuringInvulnerability = true;
    [SerializeField] private float flashInterval = 0.1f;

    private float timer = 0f;
    private bool isActive = false;
    private SpriteRenderer spriteRenderer;

    public bool IsActive => isActive;

    private void Awake()
    {
        spriteRenderer = GetComponent<SpriteRenderer>();
    }

    private void Update()
    {
        if (!isActive) return;

        timer -= Time.deltaTime;

        if (flashDuringInvulnerability)
            FlashSprite();

        if (timer <= 0f)
        {
            isActive = false;
            spriteRenderer.enabled = true; // Ensure sprite is visible after invulnerability ends
        }
    }

    /// <summary>
    /// Activates temporary invulnerability for the specified duration (must be > 0)
    /// </summary>
    public void Activate(float duration)
    {
        if (duration <= 0f)
        {
            Debug.LogWarning("TemporaryInvulnerability duration must be greater than zero.");
            return;
        }

        isActive = true;
        timer = duration;
    }

    /// <summary>
    /// Enable or disable sprite flashing during invulnerability
    /// </summary>
    public void SetFlashDuringInvulnerability(bool enable)
    {
        flashDuringInvulnerability = enable;

        // Ensure sprite is visible if flashing is disabled
        if (!flashDuringInvulnerability && isActive)
        {
            spriteRenderer.enabled = true;
        }
    }

    private void FlashSprite()
    {
        float remainder = timer % (flashInterval * 2);
        spriteRenderer.enabled = remainder > flashInterval;
    }
}
